<?php

namespace St693ava\FilamentEmailManager\Filament\Resources;

use Filament\Forms;
use Filament\Forms\Form;
use Filament\Infolists;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use St693ava\FilamentEmailManager\Filament\Resources\EmailLogResource\Pages;
use St693ava\FilamentEmailManager\Models\EmailLog;
use St693ava\FilamentEmailManager\Services\EmlGeneratorService;

class EmailLogResource extends Resource
{
    protected static ?string $model = EmailLog::class;

    // protected static ?string $navigationIcon = 'heroicon-o-envelope-open';

    protected static ?int $navigationSort = 4;

    protected static ?string $recordTitleAttribute = 'subject';

    public static function canCreate(): bool
    {
        return false; // Read-only resource
    }

    public static function canEdit($record): bool
    {
        return false; // Read-only resource
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                // This resource is read-only
            ]);
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Infolists\Components\Section::make('Email Information')
                    ->schema([
                        Infolists\Components\TextEntry::make('subject')
                            ->size(Infolists\Components\TextEntry\TextEntrySize::Large),

                        Infolists\Components\TextEntry::make('status')
                            ->badge()
                            ->color(fn (string $state): string => match ($state) {
                                'sent' => 'success',
                                'failed' => 'danger',
                                'sending' => 'warning',
                                'pending' => 'gray',
                                default => 'gray',
                            }),

                        Infolists\Components\TextEntry::make('smtpServer.name')
                            ->label('SMTP Server'),

                        Infolists\Components\TextEntry::make('template.name')
                            ->label('Template Used'),
                    ])
                    ->columns(2),

                Infolists\Components\Section::make('Recipients')
                    ->schema([
                        Infolists\Components\TextEntry::make('recipients.to')
                            ->label('To')
                            ->listWithLineBreaks()
                            ->limitList(5),

                        Infolists\Components\TextEntry::make('recipients.cc')
                            ->label('CC')
                            ->listWithLineBreaks()
                            ->limitList(3)
                            ->visible(fn (EmailLog $record) => !empty($record->recipients['cc'])),

                        Infolists\Components\TextEntry::make('recipients.bcc')
                            ->label('BCC')
                            ->listWithLineBreaks()
                            ->limitList(3)
                            ->visible(fn (EmailLog $record) => !empty($record->recipients['bcc'])),
                    ]),

                Infolists\Components\Section::make('Email Content')
                    ->schema([
                        Infolists\Components\TextEntry::make('body_html')
                            ->label('HTML Content')
                            ->html()
                            ->columnSpanFull(),

                        Infolists\Components\TextEntry::make('body_text')
                            ->label('Text Content')
                            ->columnSpanFull()
                            ->visible(fn (EmailLog $record) => !empty($record->body_text)),
                    ])
                    ->collapsible(),

                Infolists\Components\Section::make('Attachments')
                    ->schema([
                        Infolists\Components\RepeatableEntry::make('attachments')
                            ->schema([
                                Infolists\Components\TextEntry::make('name'),
                                Infolists\Components\TextEntry::make('mime'),
                                Infolists\Components\TextEntry::make('size')
                                    ->formatStateUsing(fn ($state) => \Illuminate\Support\Number::fileSize($state)),
                            ])
                            ->columns(3),
                    ])
                    ->visible(fn (EmailLog $record) => !empty($record->attachments))
                    ->collapsible(),

                Infolists\Components\Section::make('Timestamps & Status')
                    ->schema([
                        Infolists\Components\TextEntry::make('created_at')
                            ->label('Created')
                            ->dateTime(),

                        Infolists\Components\TextEntry::make('sent_at')
                            ->label('Sent')
                            ->dateTime()
                            ->visible(fn (EmailLog $record) => $record->sent_at),

                        Infolists\Components\TextEntry::make('failed_at')
                            ->label('Failed')
                            ->dateTime()
                            ->visible(fn (EmailLog $record) => $record->failed_at),

                        Infolists\Components\TextEntry::make('error_message')
                            ->label('Error')
                            ->visible(fn (EmailLog $record) => $record->error_message)
                            ->columnSpanFull(),
                    ])
                    ->columns(3),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('subject')
                    ->searchable()
                    ->sortable()
                    ->limit(50),

                Tables\Columns\TextColumn::make('recipients_count')
                    ->label('Recipients')
                    ->getStateUsing(fn (EmailLog $record) => $record->getRecipientsCount())
                    ->sortable(),

                Tables\Columns\TextColumn::make('status')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'sent' => 'success',
                        'failed' => 'danger',
                        'sending' => 'warning',
                        'pending' => 'gray',
                        default => 'gray',
                    })
                    ->sortable(),

                Tables\Columns\TextColumn::make('smtpServer.name')
                    ->label('SMTP Server')
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('template.name')
                    ->label('Template')
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\IconColumn::make('has_eml')
                    ->label('EML')
                    ->getStateUsing(fn (EmailLog $record) => $record->hasEmlFile())
                    ->boolean(),

                Tables\Columns\TextColumn::make('created_at')
                    ->label('Created')
                    ->dateTime()
                    ->sortable(),

                Tables\Columns\TextColumn::make('sent_at')
                    ->label('Sent')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'pending' => 'Pending',
                        'sending' => 'Sending',
                        'sent' => 'Sent',
                        'failed' => 'Failed',
                    ])
                    ->native(false),

                Tables\Filters\SelectFilter::make('smtp_server_id')
                    ->label('SMTP Server')
                    ->relationship('smtpServer', 'name')
                    ->searchable()
                    ->preload(),

                Tables\Filters\SelectFilter::make('template_id')
                    ->label('Template')
                    ->relationship('template', 'name')
                    ->searchable()
                    ->preload(),

                Tables\Filters\Filter::make('created_at')
                    ->form([
                        Forms\Components\DatePicker::make('created_from'),
                        Forms\Components\DatePicker::make('created_until'),
                    ])
                    ->query(function ($query, array $data) {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn ($query, $date) => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn ($query, $date) => $query->whereDate('created_at', '<=', $date),
                            );
                    }),
            ])
            ->actions([
                Tables\Actions\Action::make('download_eml')
                    ->icon('heroicon-o-arrow-down-tray')
                    ->color('success')
                    ->action(function (EmailLog $record) {
                        $emlService = app(EmlGeneratorService::class);

                        if (!$record->hasEmlFile()) {
                            // Try to regenerate EML file
                            try {
                                $emlService->generateFromLog($record);
                            } catch (\Exception $e) {
                                \Filament\Notifications\Notification::make()
                                    ->danger()
                                    ->title('EML Generation Failed')
                                    ->body($e->getMessage())
                                    ->send();
                                return;
                            }
                        }

                        return $emlService->downloadEml($record);
                    })
                    ->visible(fn (EmailLog $record) => $record->isSuccessful()),

                Tables\Actions\Action::make('regenerate_eml')
                    ->icon('heroicon-o-arrow-path')
                    ->color('warning')
                    ->action(function (EmailLog $record) {
                        try {
                            $emlService = app(EmlGeneratorService::class);
                            $emlService->regenerate($record);

                            \Filament\Notifications\Notification::make()
                                ->success()
                                ->title('EML Regenerated')
                                ->body('EML file has been regenerated successfully')
                                ->send();

                        } catch (\Exception $e) {
                            \Filament\Notifications\Notification::make()
                                ->danger()
                                ->title('EML Regeneration Failed')
                                ->body($e->getMessage())
                                ->send();
                        }
                    })
                    ->visible(fn (EmailLog $record) => $record->isSuccessful()),

                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\BulkAction::make('download_multiple_eml')
                        ->icon('heroicon-o-arrow-down-tray')
                        ->action(function (\Illuminate\Database\Eloquent\Collection $records) {
                            // Create a ZIP file with multiple EML files
                            $zip = new \ZipArchive();
                            $zipPath = storage_path('app/temp/emails-' . now()->format('Y-m-d-H-i-s') . '.zip');

                            if (!file_exists(dirname($zipPath))) {
                                mkdir(dirname($zipPath), 0755, true);
                            }

                            if ($zip->open($zipPath, \ZipArchive::CREATE) === TRUE) {
                                $emlService = app(EmlGeneratorService::class);

                                foreach ($records as $record) {
                                    if ($record->hasEmlFile()) {
                                        $emlContent = $emlService->getEmlContent($record);
                                        if ($emlContent) {
                                            $zip->addFromString("email-{$record->id}.eml", $emlContent);
                                        }
                                    }
                                }

                                $zip->close();

                                return response()->download($zipPath)->deleteFileAfterSend();
                            }
                        }),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListEmailLogs::route('/'),
            'view' => Pages\ViewEmailLog::route('/{record}'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::where('created_at', '>=', now()->subDay())->count();
    }
}